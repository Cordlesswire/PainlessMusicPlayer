// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.doctoror.fuckoffmusicplayer.playback.data.nano;

@SuppressWarnings("hiding")
public interface PlaybackDataProto {

  public static final class Media extends
      com.google.protobuf.nano.MessageNano {

    private static volatile Media[] _emptyArray;
    public static Media[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Media[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 id = 1;
    public long id;

    // optional string data = 2;
    public java.lang.String data;

    // optional string title = 3;
    public java.lang.String title;

    // optional int64 duration = 4;
    public long duration;

    // optional string artist = 5;
    public java.lang.String artist;

    // optional int64 albumId = 6;
    public long albumId;

    // optional string album = 7;
    public java.lang.String album;

    // optional string album_art = 8;
    public java.lang.String albumArt;

    // optional int32 track = 9;
    public int track;

    public Media() {
      clear();
    }

    public Media clear() {
      id = 0L;
      data = "";
      title = "";
      duration = 0L;
      artist = "";
      albumId = 0L;
      album = "";
      albumArt = "";
      track = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.id != 0L) {
        output.writeInt64(1, this.id);
      }
      if (!this.data.equals("")) {
        output.writeString(2, this.data);
      }
      if (!this.title.equals("")) {
        output.writeString(3, this.title);
      }
      if (this.duration != 0L) {
        output.writeInt64(4, this.duration);
      }
      if (!this.artist.equals("")) {
        output.writeString(5, this.artist);
      }
      if (this.albumId != 0L) {
        output.writeInt64(6, this.albumId);
      }
      if (!this.album.equals("")) {
        output.writeString(7, this.album);
      }
      if (!this.albumArt.equals("")) {
        output.writeString(8, this.albumArt);
      }
      if (this.track != 0) {
        output.writeInt32(9, this.track);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.id != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.id);
      }
      if (!this.data.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(2, this.data);
      }
      if (!this.title.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, this.title);
      }
      if (this.duration != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(4, this.duration);
      }
      if (!this.artist.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(5, this.artist);
      }
      if (this.albumId != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(6, this.albumId);
      }
      if (!this.album.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(7, this.album);
      }
      if (!this.albumArt.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(8, this.albumArt);
      }
      if (this.track != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, this.track);
      }
      return size;
    }

    @Override
    public Media mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.id = input.readInt64();
            break;
          }
          case 18: {
            this.data = input.readString();
            break;
          }
          case 26: {
            this.title = input.readString();
            break;
          }
          case 32: {
            this.duration = input.readInt64();
            break;
          }
          case 42: {
            this.artist = input.readString();
            break;
          }
          case 48: {
            this.albumId = input.readInt64();
            break;
          }
          case 58: {
            this.album = input.readString();
            break;
          }
          case 66: {
            this.albumArt = input.readString();
            break;
          }
          case 72: {
            this.track = input.readInt32();
            break;
          }
        }
      }
    }

    public static Media parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Media(), data);
    }

    public static Media parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Media().mergeFrom(input);
    }
  }

  public static final class PlaybackData extends
      com.google.protobuf.nano.MessageNano {

    private static volatile PlaybackData[] _emptyArray;
    public static PlaybackData[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new PlaybackData[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .Media playlist = 1;
    public com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media[] playlist;

    // optional int32 playlistPosition = 2;
    public int playlistPosition;

    // optional int64 mediaPosition = 3;
    public long mediaPosition;

    public PlaybackData() {
      clear();
    }

    public PlaybackData clear() {
      playlist = com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media.emptyArray();
      playlistPosition = 0;
      mediaPosition = 0L;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.playlist != null && this.playlist.length > 0) {
        for (int i = 0; i < this.playlist.length; i++) {
          com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media element = this.playlist[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      if (this.playlistPosition != 0) {
        output.writeInt32(2, this.playlistPosition);
      }
      if (this.mediaPosition != 0L) {
        output.writeInt64(3, this.mediaPosition);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.playlist != null && this.playlist.length > 0) {
        for (int i = 0; i < this.playlist.length; i++) {
          com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media element = this.playlist[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      if (this.playlistPosition != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.playlistPosition);
      }
      if (this.mediaPosition != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(3, this.mediaPosition);
      }
      return size;
    }

    @Override
    public PlaybackData mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.playlist == null ? 0 : this.playlist.length;
            com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media[] newArray =
                new com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.playlist, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.doctoror.fuckoffmusicplayer.playback.data.nano.PlaybackDataProto.Media();
            input.readMessage(newArray[i]);
            this.playlist = newArray;
            break;
          }
          case 16: {
            this.playlistPosition = input.readInt32();
            break;
          }
          case 24: {
            this.mediaPosition = input.readInt64();
            break;
          }
        }
      }
    }

    public static PlaybackData parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new PlaybackData(), data);
    }

    public static PlaybackData parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new PlaybackData().mergeFrom(input);
    }
  }
}
