// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.doctoror.commons.wear.nano;

@SuppressWarnings("hiding")
public interface WearPlaylistFromSearch {

  public static final class Playlist extends
      com.google.protobuf.nano.MessageNano {

    private static volatile Playlist[] _emptyArray;
    public static Playlist[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Playlist[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated int64 playlist = 1;
    public long[] playlist;

    // optional int64 selectedId = 2;
    public long selectedId;

    public Playlist() {
      clear();
    }

    public Playlist clear() {
      playlist = com.google.protobuf.nano.WireFormatNano.EMPTY_LONG_ARRAY;
      selectedId = 0L;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.playlist != null && this.playlist.length > 0) {
        for (int i = 0; i < this.playlist.length; i++) {
          output.writeInt64(1, this.playlist[i]);
        }
      }
      if (this.selectedId != 0L) {
        output.writeInt64(2, this.selectedId);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.playlist != null && this.playlist.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.playlist.length; i++) {
          long element = this.playlist[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.playlist.length;
      }
      if (this.selectedId != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(2, this.selectedId);
      }
      return size;
    }

    @Override
    public Playlist mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 8);
            int i = this.playlist == null ? 0 : this.playlist.length;
            long[] newArray = new long[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.playlist, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt64();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt64();
            this.playlist = newArray;
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt64();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.playlist == null ? 0 : this.playlist.length;
            long[] newArray = new long[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.playlist, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt64();
            }
            this.playlist = newArray;
            input.popLimit(limit);
            break;
          }
          case 16: {
            this.selectedId = input.readInt64();
            break;
          }
        }
      }
    }

    public static Playlist parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Playlist(), data);
    }

    public static Playlist parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Playlist().mergeFrom(input);
    }
  }
}
